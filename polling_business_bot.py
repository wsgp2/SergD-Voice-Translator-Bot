import os
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f"telegram_polling_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - ü§ñ %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def log_update(update: Update):
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ update –æ–±—ä–µ–∫—Ç–∞"""
    try:
        logger.info("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if hasattr(update, '_raw_data'):
            logger.info(f"üîç Raw Update Data:\n{json.dumps(update._raw_data, indent=2, ensure_ascii=False)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if update.effective_chat:
            logger.info(f"üí¨ Chat Info:")
            logger.info(f"- Chat ID: {update.effective_chat.id}")
            logger.info(f"- Chat Type: {update.effective_chat.type}")
            logger.info(f"- Chat Title: {update.effective_chat.title if update.effective_chat.title else '–ù–µ—Ç'}")
            logger.info(f"- Chat Username: {update.effective_chat.username if update.effective_chat.username else '–ù–µ—Ç'}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if update.effective_user:
            logger.info(f"üë§ User Info:")
            logger.info(f"- User ID: {update.effective_user.id}")
            logger.info(f"- Username: {update.effective_user.username if update.effective_user.username else '–ù–µ—Ç'}")
            logger.info(f"- Full Name: {update.effective_user.full_name}")
            logger.info(f"- Is Bot: {update.effective_user.is_bot}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            logger.info("üì¨ Message Details:")
            logger.info(f"- Message ID: {update.message.message_id}")
            logger.info(f"- Message Type: {'Text' if update.message.text else 'Voice' if update.message.voice else 'Audio' if update.message.audio else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}")
            logger.info(f"- Text Content: {update.message.text if update.message.text else '–ù–µ—Ç'}")
            logger.info(f"- Via Bot: {update.message.via_bot.username if update.message.via_bot else '–ù–µ—Ç'}")
            logger.info(f"- Forward From: {update.message.forward_from.full_name if update.message.forward_from else '–ù–µ—Ç'}")
            logger.info(f"- Is Automatic Forward: {update.message.is_automatic_forward}")
            logger.info(f"- Has Protected Content: {update.message.has_protected_content}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ update: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("\nüîî –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    log_update(update)
    
    try:
        await update.message.reply_text(
            "‚úÖ –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n"
            f"üí¨ Chat ID: {update.effective_chat.id}\n"
            f"üìù Message ID: {update.message.message_id}"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def handle_business_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("\nüè¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ")
    log_update(update)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        if update.business_message.text:
            message_type = "–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif update.business_message.voice:
            message_type = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif update.business_message.audio:
            message_type = "–ê—É–¥–∏–æ —Ñ–∞–π–ª"
        
        response_text = (
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {message_type}!\n"
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.full_name}\n"
            f"üí¨ Chat ID: {update.effective_chat.id}\n"
            f"üìù Message ID: {update.business_message.message_id}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if update.business_message.voice:
            voice = update.business_message.voice
            response_text += (f"\nüé§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
                            f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫\n"
                            f"- –†–∞–∑–º–µ—Ä: {voice.file_size} –±–∞–π—Ç\n"
                            f"- File ID: {voice.file_id}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
            voice_file = await context.bot.get_file(voice.file_id)
            file_path = f"voice_messages/{update.business_message.message_id}.ogg"
            os.makedirs("voice_messages", exist_ok=True)
            await voice_file.download_to_drive(file_path)
            
            response_text += f"\n‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {file_path}"
        
        await update.business_message.reply_text(response_text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.ALL,  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        handle_business_message,
        block=False
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling(
        allowed_updates=[
            "message",
            "edited_message",
            "business_connection",
            "business_message",
            "edited_business_message",
            "deleted_business_messages"
        ],
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()

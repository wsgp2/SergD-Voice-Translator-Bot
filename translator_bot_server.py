import os
import logging
import asyncio
import shutil
import telegram
import openai
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatType
from telegram.error import BadRequest
from openai import OpenAI
from dotenv import load_dotenv
import tempfile
import json
import re
from google.cloud import texttospeech

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)
logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
disable_message_deletion = True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
google_client = texttospeech.TextToSpeechClient()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
OWNER_USERNAME = "sergei_dyshkant"  # Username –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ (case-insensitive)
OWNER_ID = os.getenv('OWNER_ID')  # –ß–∏—Å–ª–æ–≤–æ–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
SETTINGS_FILE = 'chat_settings.json'
STATS_FILE = 'usage_stats.json'

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
MODE_TRANSLATE = "translate"    # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥
MODE_SUMMARIZE = "summarize"    # –¢–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
MODE_BOTH = "both"              # –ò –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è

LANG_EMOJIS = {
    'ru': 'üá∑üá∫',
    'id': 'üáÆüá©',
    'en': 'üá∫üá∏'
}

VOICES = {
    'ru': 'shimmer',  # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å üë©
    'id': 'nova',     # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å üë©
    'en': 'echo'      # –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å üë®
}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
DEFAULT_CHAT_SETTINGS = {
    "enabled_languages": ["ru", "en"],  # –Ø–∑—ã–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∞–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ–≤–æ–¥
    "mode": MODE_TRANSLATE,             # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥)
    "tts_enabled": False                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
def load_chat_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", exc_info=True)
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
def save_chat_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", exc_info=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def load_usage_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"users": {}, "chats": {}, "daily_usage": {}}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)
        return {"users": {}, "chats": {}, "daily_usage": {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def save_usage_stats(stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JSON-—Ñ–∞–π–ª"""
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_split_message(context, chat_id, message_text, reply_to_message_id=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å —É—á–µ—Ç–æ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    MAX_MESSAGE_LENGTH = 3000  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 4096 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    MAX_PART_LENGTH = MAX_MESSAGE_LENGTH - 20  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ —á–∞—Å—Ç–∏ –∏ –∑–∞–ø–∞—Å
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(message_text) <= MAX_PART_LENGTH:
        return await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_to_message_id=reply_to_message_id,
            parse_mode=parse_mode
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    is_html = parse_mode == 'HTML'
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    
    # –î–ª—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if is_html:
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö HTML-—Ç–µ–≥–æ–≤
        def ensure_html_tags_closed(text):
            # –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤ –≤ Telegram
            common_tags = ['b', 'i', 'code', 'pre', 'a']
            open_tags = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            for tag in common_tags:
                tag_open = f"<{tag}"
                tag_close = f"</{tag}>"
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
                open_count = text.count(tag_open) - text.count(f"</{tag}>")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ
                if open_count > 0:
                    open_tags.extend([tag] * open_count)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            closing_tags = ''
            for tag in reversed(open_tags):
                closing_tags += f"</{tag}>"
            
            return text + closing_tags, closing_tags
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º HTML-—Ç–µ–≥–æ–≤
        current_position = 0
        while current_position < len(message_text):
            # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            part = message_text[current_position:current_position + MAX_PART_LENGTH]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞–µ–º HTML-—Ç–µ–≥
            last_open_bracket = part.rfind('<')
            last_close_bracket = part.rfind('>')
            
            # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π, —Ç–æ —Ç–µ–≥ —Ä–∞–∑–æ—Ä–≤–∞–Ω
            if last_open_bracket > last_close_bracket:
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–≥–∞
                part = part[:last_open_bracket]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            part_with_closed_tags, closing_tags = ensure_html_tags_closed(part)
            parts.append(part_with_closed_tags)
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –≤ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
            opening_tags = ''
            for tag in reversed(open_tags):
                opening_tags += f"<{tag}>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
            if current_position + MAX_PART_LENGTH < len(message_text) and opening_tags:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
                current_position += len(part)
                message_text = message_text[:current_position] + opening_tags + message_text[current_position:]
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ –±–µ–∑ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤)
                current_position += len(part)
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        for i in range(0, len(message_text), MAX_PART_LENGTH):
            parts.append(message_text[i:i + MAX_PART_LENGTH])
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {parse_mode}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    sent_messages = []
    first_message = None
    
    for i, part in enumerate(parts):
        part_text = part.strip()
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —á–∞—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        if len(parts) > 1:
            part_text += f"\n\n(–ß–∞—Å—Ç—å {i+1}/{len(parts)})"
        
        try:
            if i == 0:
                # –ü–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å reply_to_message_id
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=part_text,
                    reply_to_message_id=reply_to_message_id,
                    parse_mode=parse_mode
                )
                first_message = msg
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=part_text,
                    parse_mode=parse_mode
                )
            sent_messages.append(msg)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(parts)}: {e}", exc_info=True)
            # –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–æ–±—É–µ–º —É–∫–æ—Ä–æ—Ç–∏—Ç—å
            shortened_text = part_text[:MAX_PART_LENGTH//2] + "...\n[\u0421–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á–∞—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞]\n..."
            try:
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=shortened_text,
                    parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                )
                sent_messages.append(msg)
                if i == 0 and not first_message:
                    first_message = msg
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}", exc_info=True)
    
    return first_message

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞
def update_usage_stats(user_id, user_name, chat_id, chat_title):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        stats = load_usage_stats()
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(user_id) not in stats["users"]:
            stats["users"][str(user_id)] = {
                "name": user_name,
                "usage_count": 0,
                "last_used": ""
            }
        
        stats["users"][str(user_id)]["usage_count"] += 1
        stats["users"][str(user_id)]["last_used"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        if str(chat_id) not in stats["chats"]:
            stats["chats"][str(chat_id)] = {
                "name": chat_title if chat_title else "–õ–∏—á–Ω—ã–π —á–∞—Ç",
                "usage_count": 0
            }
        
        stats["chats"][str(chat_id)]["usage_count"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today not in stats.get("daily_usage", {}):
            stats["daily_usage"] = stats.get("daily_usage", {})
            stats["daily_usage"][today] = 0
        
        stats["daily_usage"][today] += 1
        
        save_usage_stats(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
def get_chat_settings(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    settings = load_chat_settings()
    return settings.get(str(chat_id), DEFAULT_CHAT_SETTINGS.copy())

def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"""
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'\s+([.,!?])', r'\1', text)
    text = re.sub(r'[¬´¬ª"""]', '"', text)
    return text.strip()

async def transcribe_audio(audio_file_path: str) -> tuple[str, str]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è Whisper API"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞: {audio_file_path}")
        response = openai_client.audio.transcriptions.create(
            model="whisper-1",
            file=open(audio_file_path, "rb"),
            response_format="verbose_json"
        )
        
        detected_text = response.text
        detected_lang = response.language
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –Ø–∑—ã–∫: {detected_lang}")
        return detected_text, detected_lang
    except openai.RateLimitError as e:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã –∏–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        error_message = str(e)
        if "insufficient_quota" in error_message or "exceeded your current quota" in error_message:
            logger.error(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç API OpenAI: {error_message}", exc_info=True)
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
            error_message = "QUOTA_EXCEEDED: " + error_message
        else:
            # –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API OpenAI: {error_message}", exc_info=True)
            error_message = "RATE_LIMIT: " + error_message
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ –≤ handle_voice
        return error_message, ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        raise

async def translate_with_gpt(text: str, source_lang: str, target_languages: list = None) -> dict:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è ChatGPT —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤"""
    translations = {source_lang: clean_text(text)}
    
    # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ
    if target_languages is None:
        if source_lang == 'ru':
            target_languages = ['en', 'id']
        elif source_lang == 'id':
            target_languages = ['en', 'ru']
        elif source_lang == 'en':
            target_languages = ['ru', 'id']
    
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {text} —Å —è–∑—ã–∫–∞ {source_lang} –Ω–∞ —è–∑—ã–∫–∏ {target_languages}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ü–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤
        target_languages_dict = {}
        format_parts = []
        
        for lang in target_languages:
            if lang != source_lang:
                if lang == 'ru':
                    target_languages_dict['russian'] = 'Russian'
                    format_parts.append('"russian": "translation"')
                elif lang == 'en':
                    target_languages_dict['english'] = 'English'
                    format_parts.append('"english": "translation"')
                elif lang == 'id':
                    target_languages_dict['indonesian'] = 'Indonesian'
                    format_parts.append('"indonesian": "translation"')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        if not target_languages_dict:
            return translations
            
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–∑—ã–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        languages_str = ", ".join(target_languages_dict.values())
        format_str = "{" + ", ".join(format_parts) + "}"
        
        source_lang_name = "Russian" if source_lang == 'ru' else "Indonesian" if source_lang == 'id' else "English"
        
        system_prompt = f"""You are a professional translator with expertise in {source_lang_name} and {languages_str}. 
        Your task is to translate the given {source_lang_name} text while:
        1. üéØ Preserving the original meaning and context
        2. üí´ Using natural, fluent language in the target languages
        3. üé≠ Maintaining the tone and style of the original text
        4. üîç Being attentive to cultural nuances
        5. üìö Using appropriate idioms when applicable
        
        Return translations in this exact JSON format:
        {format_str}"""
        
        user_prompt = f"Translate this text with attention to context and cultural nuances: {text}"

        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            response_format={ "type": "json_object" }
        )
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        result = json.loads(response.choices[0].message.content)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'english' in result and 'en' in target_languages:
            translations['en'] = clean_text(result['english'])
        if 'russian' in result and 'ru' in target_languages:
            translations['ru'] = clean_text(result['russian'])
        if 'indonesian' in result and 'id' in target_languages:
            translations['id'] = clean_text(result['indonesian'])
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}", exc_info=True)
        for lang in target_languages:
            if lang != source_lang and lang not in translations:
                translations[lang] = "Error during translation"
    
    return translations

async def summarize_with_gpt(text: str, lang: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT"""
    try:
        logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ {lang}: {text[:100]}...")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—é–º–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è Telegram. 

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram HTML:

1. –ò—Å–ø–æ–ª—å–∑—É–π <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
2. –ò—Å–ø–æ–ª—å–∑—É–π <i>—Ç–µ–∫—Å—Ç</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è
3. –ò—Å–ø–æ–ª—å–∑—É–π <code>—Ç–µ–∫—Å—Ç</code> –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ (–∫–æ–¥)
4. –ò—Å–ø–æ–ª—å–∑—É–π <a href="URL">—Ç–µ–∫—Å—Ç</a> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
5. –ò—Å–ø–æ–ª—å–∑—É–π <pre>—Ç–µ–∫—Å—Ç</pre> –¥–ª—è –±–ª–æ–∫–æ–≤ –ø—Ä–µ–¥—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
6. –†–∞–∑–¥–µ–ª—è–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ —Ä–∞–∑–¥–µ–ª—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—é–º–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –æ —Å—É—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏/–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –µ–º–∫–∏–µ —Ñ—Ä–∞–∑—ã
4. –í—ã–¥–µ–ª–∏ <b>–∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º</b>
5. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å—É–º–º—ã, —É—Å–ª–æ–≤–∏—è, –¥–∞—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –ø—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É (—á—Ç–æ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç—Å—è, –∫—Ç–æ —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏ –∫–æ–≥–¥–∞)
6. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è–π –∞–±–∑–∞—Ü—ã –ø—Ä–æ–ø—É—Å–∫–æ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
7. –°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ–Ω—Ü–µ, –æ–ø–∏—Å–∞–≤ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–ª–∞–Ω—É –µ—Å–ª–∏ –æ–Ω–∏ –æ–±—Å—É–∂–¥–µ–Ω—ã

–î–æ–±–∞–≤—å —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–Ω–µ –±–æ–ª–µ–µ 15 —à—Ç—É–∫) –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞. –û—Ñ–æ—Ä–º–∏ —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑–µ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è."""
        
        user_prompt = f"–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏: {text}"
        
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        )
        
        summary = response.choices[0].message.content
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—é–º–µ –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        return summary
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {str(e)}"

async def process_message_content(text: str, source_lang: str, chat_settings: dict, voice_duration: int = 0) -> dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
    
    Args:
        text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        source_lang: —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        chat_settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        voice_duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –µ—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    result = {
        "original": text,
        "translations": {},
        "summary": None,
        "source_lang": source_lang
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
    target_languages = chat_settings.get("enabled_languages", ["ru", "en"])
    mode = chat_settings.get("mode", MODE_TRANSLATE)
    
    # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (<30 —Å–µ–∫) –∏–∑–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º
    original_mode = mode
    if voice_duration > 0 and voice_duration < 30:
        if mode == MODE_BOTH:
            mode = MODE_TRANSLATE
            logger.info(f"–ö–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫): —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        elif mode == MODE_SUMMARIZE:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            logger.info(f"–ö–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫): –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª
            return {
                "original": text,
                "translations": {},
                "summary": None,
                "source_lang": source_lang,
                "ignore": True  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if mode in [MODE_TRANSLATE, MODE_BOTH]:
        translations = await translate_with_gpt(text, source_lang, target_languages)
        result["translations"] = translations
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if mode in [MODE_SUMMARIZE, MODE_BOTH]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        summary_lang = None
        
        # –í —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        if mode == MODE_SUMMARIZE:
            summary_lang = source_lang
            logger.info(f"–†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ {source_lang}")
        # –í —Ä–µ–∂–∏–º–µ –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ —è–∑—ã–∫–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
            if len(target_languages) == 2:
                summary_lang = target_languages[0] if target_languages[1] == source_lang else target_languages[1]
            # –ï—Å–ª–∏ —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–∫–∞–∑–∞–Ω –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
            else:
                for lang in target_languages:
                    if lang != source_lang:
                        summary_lang = lang
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π
            if not summary_lang or summary_lang == source_lang:
                summary_lang = "en" if source_lang != "en" else "ru"
                
            logger.info(f"–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ —è–∑—ã–∫–µ: {summary_lang}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        text_to_summarize = text
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ –∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"
        if summary_lang != source_lang and mode != MODE_SUMMARIZE:
            translations = await translate_with_gpt(text, source_lang, [summary_lang])
            if summary_lang in translations:
                text_to_summarize = translations[summary_lang]
        
        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —è–∑—ã–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        summary = await summarize_with_gpt(text_to_summarize, summary_lang)
        result["summary"] = summary
        result["summary_lang"] = summary_lang
    
    return result

async def split_long_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤"""
    if len(text) <= max_length:
        return [text]
        
    parts = []
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫ max_length —Å–∏–º–≤–æ–ª—É –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª
    current_pos = 0
    while current_pos < len(text):
        if current_pos + max_length >= len(text):
            parts.append(text[current_pos:])
            break
            
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        split_pos = text.rfind('\n', current_pos, current_pos + max_length)
        if split_pos == -1 or split_pos == current_pos:
            split_pos = text.rfind(' ', current_pos, current_pos + max_length)
            
        if split_pos == -1 or split_pos == current_pos:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ max_length
            split_pos = current_pos + max_length
            
        parts.append(text[current_pos:split_pos])
        current_pos = split_pos + 1
        
    return parts

async def safe_delete_message(message, force_delete=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    force_delete - –µ—Å–ª–∏ True, —É–¥–∞–ª—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ; –µ—Å–ª–∏ False, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    global disable_message_deletion
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–¥–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if disable_message_deletion and not force_delete:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return False
    
    if message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ª–∏ —ç—Ç–æ —á–∞—Ç
        is_private_chat = False
        if hasattr(message, 'chat') and message.chat and message.chat.type == ChatType.PRIVATE:
            is_private_chat = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
        is_business = False
        if hasattr(message, 'business_chat_id'):
            is_business = True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏–ª–∏ –±–∏–∑–Ω–µ—Å-—á–∞—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        if (is_private_chat or is_business) and not force_delete:
            logger.info("–ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º/–±–∏–∑–Ω–µ—Å —á–∞—Ç–µ")
            return False
        
        # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å
        try:
            await message.delete()
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    return False

async def safe_edit_message(context, processing_msg, text, parse_mode='Markdown'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not processing_msg or not text:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ª–∏ —ç—Ç–æ —á–∞—Ç
    is_private = False
    is_business_message = False
    
    if hasattr(processing_msg, 'chat') and processing_msg.chat and processing_msg.chat.type == ChatType.PRIVATE:
        is_private = True
        logger.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if hasattr(processing_msg, 'business_chat_id'):
        is_business_message = True
        logger.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ translator_bot.py)
        if hasattr(processing_msg, 'edit_text'):
            await processing_msg.edit_text(
                text=text.strip(),
                parse_mode=parse_mode
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ edit_text")
            return True
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ edit_text, –∏—Å–ø–æ–ª—å–∑—É–µ–º context.bot
            await context.bot.edit_message_text(
                text=text.strip(),
                chat_id=processing_msg.chat_id,
                message_id=processing_msg.message_id,
                parse_mode=parse_mode
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ context.bot")
            return True
    except telegram.error.BadRequest as br_error:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if "message is not modified" in str(br_error):
            logger.debug("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω")
            return True  # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–∫ –Ω—É–∂–Ω–æ
        elif "Message to edit not found" in str(br_error) and is_private:
            # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–Ω–æ–≥–¥–∞ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if hasattr(processing_msg, 'reply_text'):
                    await processing_msg.reply_text(text.strip(), parse_mode=parse_mode)
                    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return True
            except Exception as reply_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {reply_error}")
        else:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {br_error}")
    except Exception as e:
        logger.warning(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return False

async def get_parse_mode_for_mode(mode: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    # –í —Ä–µ–∂–∏–º–∞—Ö —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if mode in [MODE_SUMMARIZE, MODE_BOTH]:
        return 'HTML'
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown
    return 'Markdown'

async def safe_send_message(message_obj, text: str, parse_mode: str = None, mode: str = MODE_TRANSLATE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ï—Å–ª–∏ parse_mode –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
        if parse_mode is None:
            parse_mode = get_parse_mode_for_mode(mode)
            
        if len(text) <= 4096:
            return await message_obj.reply_text(text, parse_mode=parse_mode)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
            parts = split_long_message(text)
            last_message = None
            for part in parts:
                last_message = await message_obj.reply_text(part, parse_mode=parse_mode)
            return last_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
        try:
            return await message_obj.reply_text(text)
        except Exception as inner_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(inner_e)}", exc_info=True)
            return None

async def generate_audio(text: str, lang: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI TTS –∏–ª–∏ Google TTS –¥–ª—è –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    try:
        logger.info(f"üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text} –Ω–∞ —è–∑—ã–∫–µ {lang}")
        
        # –î–ª—è –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Google Cloud TTS
        if lang == 'id':
            input_text = texttospeech.SynthesisInput(text=text)
            
            voice = texttospeech.VoiceSelectionParams(
                language_code='id-ID',
                name='id-ID-Standard-A'
            )
            
            audio_config = texttospeech.AudioConfig(
                audio_encoding=texttospeech.AudioEncoding.MP3
            )
            
            response = google_client.synthesize_speech(
                input=input_text,
                voice=voice,
                audio_config=audio_config
            )
            
            return response.audio_content
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI TTS –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if lang not in VOICES:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –¥–ª—è TTS: {lang}")
            raise ValueError(f"Unsupported language for TTS: {lang}")
            
        response = openai_client.audio.speech.create(
            model="tts-1",
            voice=VOICES[lang],
            input=text
        )
        return response.content
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}", exc_info=True)
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n'
        '–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π) –∏ –ø–µ—Ä–µ–≤–æ–∂—É:\n'
        '–†—É—Å—Å–∫–∏–π ‚Üí –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n'
        '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π\n'
        ' + –¥–æ–±–∞–≤–ª—è—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
    )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    username = update.effective_user.first_name if update.effective_user else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    start_text = (
        f'üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n'
        '–Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —è –±—É–¥—É –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏/–∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ.\n\n'
        'üî• –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n'
        '‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
        '‚Ä¢ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (>30 —Å–µ–∫)\n'
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ, –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤\n'
        '‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤\n\n'
        '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n'
        '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings'
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await safe_send_message(update.message, start_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n'
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        '2. –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫\n'
        '3. –ü–µ—Ä–µ–≤–µ–¥–µ—Ç –∏/–∏–ª–∏ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\n'
        '4. –ü–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n'
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n'
        '–†—É—Å—Å–∫–∏–π, –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n'
        '–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —è–∑—ã–∫–æ–≤:\n'
        '/settings_langs_ru_en - –†—É—Å—Å–∫–∏–π –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n'
        '/settings_langs_ru_id - –†—É—Å—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n'
        '/settings_langs_en_id - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n\n'
        '–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤:\n'
        '/settings_mode_translate - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n'
        '/settings_mode_summarize - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
        '/settings_mode_both - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n'
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n'
        '/settings - –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n'
        '/tts_on - –≤–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ\n'
        '/tts_off - –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ\n'
        '/tts on/off - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ\n\n'
        '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n'
        '- –ö–æ—Ä–æ—Ç–∫–∏–µ (<30 —Å–µ–∫): —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º–µ "summarize"\n'
        '- –î–ª–∏–Ω–Ω—ã–µ (>30 —Å–µ–∫): –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n'
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n'
        '/settings - –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n'
        '/languages - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞\n'
        '/tts - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏'
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await safe_send_message(update.message, help_text)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
    user = update.effective_user
    chat = update.effective_chat
    
    if not chat:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
    is_admin = False
    if chat.type != ChatType.PRIVATE:
        try:
            chat_member = await context.bot.get_chat_member(chat.id, user.id)
            is_admin = chat_member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", exc_info=True)
    else:
        # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = True
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    is_owner = False
    if user.username and user.username.lower() == OWNER_USERNAME.lower():
        is_owner = True
    elif OWNER_ID and str(user.id) == str(OWNER_ID):
        is_owner = True
    
    if not (is_admin or is_owner):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    settings = load_chat_settings()
    chat_id_str = str(chat.id)
    
    if chat_id_str not in settings:
        settings[chat_id_str] = DEFAULT_CHAT_SETTINGS.copy()
    
    chat_settings = settings[chat_id_str]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    message = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        
        "üîÑ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</b>:\n"
        "/settings_mode_translate - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n"
        "/settings_mode_summarize - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n"
        "/settings_mode_both - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n"
        
        "üåê <b>–Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞</b>:\n"
        "/settings_langs_ru_en - –†—É—Å—Å–∫–∏–π –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "/settings_langs_ru_id - –†—É—Å—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n"
        "/settings_langs_en_id - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n\n"
        
        "üîä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ</b>:\n"
        "/tts_on - –≤–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ\n"
        "/tts_off - –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ\n\n"
        
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞):\n"
        "/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n\n"
        
        "üîÑ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
        f"- –Ø–∑—ã–∫–∏: {', '.join(chat_settings['enabled_languages'])}\n"
        f"- –†–µ–∂–∏–º: {chat_settings['mode']}\n"
        f"- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if chat_settings['tts_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ)
    message_obj = update.message
    if not message_obj and hasattr(update, 'business_message') and update.business_message:
        message_obj = update.business_message
    
    if not message_obj:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        return
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await safe_send_message(message_obj, message, parse_mode='HTML')

async def settings_langs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings_langs –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ)
    message_obj = update.message
    if not message_obj and hasattr(update, 'business_message') and update.business_message:
        message_obj = update.business_message
    
    if not message_obj:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ settings_langs_command")
        return
        
    if not chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = False
    if chat.type != ChatType.PRIVATE:
        try:
            chat_member = await context.bot.get_chat_member(chat.id, user.id)
            is_admin = chat_member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", exc_info=True)
    else:
        is_admin = True
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    is_owner = False
    if user.username and OWNER_USERNAME and user.username.lower() == OWNER_USERNAME.lower():
        is_owner = True
    elif OWNER_ID and str(user.id) == str(OWNER_ID):
        is_owner = True
    
    if not (is_admin or is_owner):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_chat_settings()
    chat_id_str = str(chat.id)
    
    if chat_id_str not in settings:
        settings[chat_id_str] = DEFAULT_CHAT_SETTINGS.copy()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    
    if not args:
        await message_obj.reply_text(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`/settings_langs ru en` - –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru (–†—É—Å—Å–∫–∏–π), en (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π), id (–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π)\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/settings_langs_ru_en - –†—É—Å—Å–∫–∏–π –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
            "/settings_langs_ru_id - –†—É—Å—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n"
            "/settings_langs_en_id - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
    valid_langs = ["ru", "en", "id"]
    selected_langs = []
    
    for lang in args:
        lang = lang.lower()
        if lang in valid_langs:
            selected_langs.append(lang)
    
    if not selected_langs:
        await message_obj.reply_text(
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —è–∑—ã–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:\n"
            "ru (–†—É—Å—Å–∫–∏–π), en (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π), id (–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π)"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings[chat_id_str]["enabled_languages"] = selected_langs
    save_chat_settings(settings)
    
    await message_obj.reply_text(
        f"‚úÖ –Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
        f"–¢–µ–ø–µ—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —è–∑—ã–∫–∏: {', '.join(selected_langs)}"
    )

async def settings_langs_ru_en_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["ru", "en"]
    await settings_langs_command(update, context)

async def settings_langs_ru_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["ru", "id"]
    await settings_langs_command(update, context)

async def settings_langs_en_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["en", "id"]
    await settings_langs_command(update, context)

async def settings_mode_translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["translate"]
    await settings_mode_command(update, context)

async def settings_mode_summarize_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["summarize"]
    await settings_mode_command(update, context)

async def settings_mode_both_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["both"]
    await settings_mode_command(update, context)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

async def settings_mode_perevod_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    context.args = ["translate"]
    await settings_mode_command(update, context)

async def settings_mode_sammarajz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    context.args = ["summarize"]
    await settings_mode_command(update, context)

async def settings_mode_bof_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    context.args = ["both"]
    await settings_mode_command(update, context)

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
async def tts_on_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["on"]
    await settings_tts_command(update, context)

async def tts_off_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    context.args = ["off"]
    await settings_tts_command(update, context)

async def settings_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings_mode –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    if not chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = False
    if chat.type != ChatType.PRIVATE:
        try:
            chat_member = await context.bot.get_chat_member(chat.id, user.id)
            is_admin = chat_member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", exc_info=True)
    else:
        is_admin = True
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    is_owner = False
    if user.username and OWNER_USERNAME and user.username.lower() == OWNER_USERNAME.lower():
        is_owner = True
    elif OWNER_ID and str(user.id) == str(OWNER_ID):
        is_owner = True
    
    if not (is_admin or is_owner):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_chat_settings()
    chat_id_str = str(chat.id)
    
    if chat_id_str not in settings:
        settings[chat_id_str] = DEFAULT_CHAT_SETTINGS.copy()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
            "- `translate` - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n"
            "- `summarize` - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "- `both` - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n"
            "–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/settings_mode_translate - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n"
            "/settings_mode_summarize - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "/settings_mode_both - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n"
            "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è:\n"
            "/settings_mode_perevod - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n"
            "/settings_mode_sammarajz - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "/settings_mode_bof - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"
        )
        return
    
    mode = args[0].lower()
    
    if mode not in [MODE_TRANSLATE, MODE_SUMMARIZE, MODE_BOTH]:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
            "- `translate` - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥\n"
            "- `summarize` - —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n"
            "- `both` - –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings[chat_id_str]["mode"] = mode
    save_chat_settings(settings)
    
    mode_name = {
        MODE_TRANSLATE: "—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥",
        MODE_SUMMARIZE: "—Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è",
        MODE_BOTH: "–ø–µ—Ä–µ–≤–æ–¥ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"
    }
    
    await update.message.reply_text(
        f"‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
        f"–ù–æ–≤—ã–π —Ä–µ–∂–∏–º: {mode_name.get(mode, mode)}"
    )

async def settings_tts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings_tts –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    user = update.effective_user
    chat = update.effective_chat
    
    if not chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = False
    if chat.type != ChatType.PRIVATE:
        try:
            chat_member = await context.bot.get_chat_member(chat.id, user.id)
            is_admin = chat_member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", exc_info=True)
    else:
        is_admin = True
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    is_owner = False
    if user.username and OWNER_USERNAME and user.username.lower() == OWNER_USERNAME.lower():
        is_owner = True
    elif OWNER_ID and str(user.id) == str(OWNER_ID):
        is_owner = True
    
    if not (is_admin or is_owner):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_chat_settings()
    chat_id_str = str(chat.id)
    
    if chat_id_str not in settings:
        settings[chat_id_str] = DEFAULT_CHAT_SETTINGS.copy()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    
    if not args or args[0].lower() not in ["on", "off"]:
        await update.message.reply_text(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'on' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ 'off' –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: `/settings_tts on`"
        )
        return
    
    tts_enabled = args[0].lower() == "on"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings[chat_id_str]["tts_enabled"] = tts_enabled
    save_chat_settings(settings)
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if tts_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}"
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    user = update.effective_user
    
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username –∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID
    is_owner = False
    if user.username and user.username.lower() == OWNER_USERNAME.lower():
        is_owner = True
    elif OWNER_ID and str(user.id) == str(OWNER_ID):
        is_owner = True
    
    if not is_owner:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_usage_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = generate_stats_message(stats)
    
    await update.message.reply_text(message, parse_mode='Markdown')

def generate_stats_message(stats):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    total_uses = sum(user_data.get("usage_count", 0) for user_data in stats.get("users", {}).values())
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = len(stats.get("users", {}))
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    total_chats = len(stats.get("chats", {}))
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = sorted(
        [(user_id, data.get("name", "Unknown"), data.get("usage_count", 0)) for user_id, data in stats.get("users", {}).items()],
        key=lambda x: x[2],
        reverse=True
    )[:5]  # –¢–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    # –¢–æ–ø —á–∞—Ç–æ–≤
    top_chats = sorted(
        [(chat_id, data.get("name", "Unknown"), data.get("usage_count", 0)) for chat_id, data in stats.get("chats", {}).items()],
        key=lambda x: x[2],
        reverse=True
    )[:5]  # –¢–æ–ø 5 —á–∞—Ç–æ–≤
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    daily_stats = stats.get("daily_usage", {})
    recent_days = sorted(list(daily_stats.keys()), reverse=True)[:7]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
        f"- –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {total_uses}\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"- –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n\n"
        
        "üë§ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n"
    )
    
    for i, (user_id, name, count) in enumerate(top_users):
        message += f"{i+1}. {name}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    
    message += "\nüí¨ **–¢–æ–ø —á–∞—Ç–æ–≤**\n"
    
    for i, (chat_id, name, count) in enumerate(top_chats):
        message += f"{i+1}. {name}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    
    message += "\nüìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º**\n"
    
    for day in recent_days:
        message += f"- {day}: {daily_stats.get(day, 0)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    
    return message

async def send_daily_stats(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞"""
    try:
        stats = load_usage_stats()
        message = generate_stats_message(stats)
        
        # –ü–æ–∏—Å–∫ ID —á–∞—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_chat = None
        for chat_id, chat_data in stats.get("chats", {}).items():
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –µ—Å—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
            if not chat_id.startswith("-"):  # –ù–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                try:
                    chat = await context.bot.get_chat(int(chat_id))
                    if chat.type == ChatType.PRIVATE and (chat.username == OWNER_ID or str(chat.id) == OWNER_ID):
                        owner_chat = chat.id
                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {str(e)}", exc_info=True)
        
        if owner_chat:
            await context.bot.send_message(
                chat_id=owner_chat,
                text=f"üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞**\n\n{message}",
                parse_mode='Markdown'
            )
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)

async def handle_alternative_commands(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str, is_business: bool = False) -> bool:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ">"""
    if not message_text.startswith(">"):
        return False
    
    message = update.business_message if is_business else update.message
    chat_type = message.chat.type if hasattr(message, 'chat') else 'unknown'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ">" –∏ –ª—é–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = message_text[1:].split()
    command = parts[0].lower()
    args = parts[1:] if len(parts) > 1 else []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    context.args = args
    
    logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: >{command} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args} –≤ {chat_type} —á–∞—Ç–µ")
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
    command_handlers = {
        "start": start_command,
        "help": help_command,
        "settings": settings_command,
        "languages": settings_langs_command,
        "settings_langs_ru_en": settings_langs_ru_en_command,
        "settings_langs_ru_id": settings_langs_ru_id_command,
        "settings_langs_en_id": settings_langs_en_id_command,
        "mode": settings_mode_command,
        "settings_mode": settings_mode_command,
        "settings_mode_translate": settings_mode_translate_command,
        "settings_mode_summarize": settings_mode_summarize_command,
        "settings_mode_both": settings_mode_both_command,
        "settings_mode_perevod": settings_mode_perevod_command,
        "settings_mode_sammarajz": settings_mode_sammarajz_command, 
        "settings_mode_bof": settings_mode_bof_command,
        "tts": settings_tts_command,
        "tts_on": tts_on_command,
        "tts_off": tts_off_command,
        "stats": stats_command
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if command in command_handlers:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
            await command_handlers[command](update, context)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã '{command}': {str(e)}", exc_info=True)
            await message.reply_text(f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}'")
            return True
    
    return False

async def handle_business_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(update, 'business_message') and update.business_message:
        message = update.business_message
        is_business = True
        chat_type = message.chat.type if hasattr(message, 'chat') else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if hasattr(message, 'text') and message.text and chat_type == ChatType.PRIVATE:
            if await handle_alternative_commands(update, context, message.text, is_business=True):
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice:
            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –±–∏–∑–Ω–µ—Å-–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            await handle_voice(update, context, is_business=True, media_type="voice")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document and message.document.mime_type and message.document.mime_type.startswith('audio/'):
            logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ-–¥–æ–∫—É–º–µ–Ω—Ç (–±–∏–∑–Ω–µ—Å). –¢–∏–ø —á–∞—Ç–∞: {chat_type}, MIME: {message.document.mime_type}")
            await handle_voice(update, context, is_business=True, media_type="document")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (music)
        elif message.audio:
            logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–±–∏–∑–Ω–µ—Å). –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            await handle_voice(update, context, is_business=True, media_type="audio")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif hasattr(update, 'message') and update.message:
        message = update.message
        chat_type = message.chat.type if hasattr(message, 'chat') else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if hasattr(message, 'text') and message.text and chat_type == ChatType.PRIVATE:
            if await handle_alternative_commands(update, context, message.text, is_business=False):
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            await handle_voice(update, context, is_business=False, media_type="voice")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document and message.document.mime_type and message.document.mime_type.startswith('audio/'):
            logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ-–¥–æ–∫—É–º–µ–Ω—Ç. –¢–∏–ø —á–∞—Ç–∞: {chat_type}, MIME: {message.document.mime_type}")
            await handle_voice(update, context, is_business=False, media_type="document")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (music)
        elif message.audio:
            logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏. –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            await handle_voice(update, context, is_business=False, media_type="audio")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE, is_business: bool = False, media_type: str = "voice"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        message = update.business_message if is_business else update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if not message:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == "voice" and not message.voice:
            return
        elif media_type == "document" and not message.document:
            return
        elif media_type == "audio" and not message.audio:
            return
            
        chat_id = message.chat.id
        user_id = message.from_user.id if message.from_user else None
        user_name = message.from_user.full_name if message.from_user else "Unknown"
        is_chat_owner = message.chat.type != ChatType.PRIVATE and message.from_user and message.from_user.id == message.chat.id
        chat_title = message.chat.title if message.chat.title else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if user_id:
            update_usage_stats(user_id, user_name, chat_id, chat_title)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        chat_settings = get_chat_settings(chat_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        mode = chat_settings.get("mode", MODE_TRANSLATE)
        tts_enabled = chat_settings.get("tts_enabled", False)
        enabled_languages = chat_settings.get("enabled_languages", ["ru", "en"])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        voice_duration = 0
        if media_type == "voice" and message.voice and hasattr(message.voice, 'duration'):
            voice_duration = message.voice.duration
        elif media_type == "audio" and message.audio and hasattr(message.audio, 'duration'):
            voice_duration = message.audio.duration
        elif media_type == "document":
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–ª–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            voice_duration = 30  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö
        if voice_duration < 30 and mode == MODE_SUMMARIZE:
            logger.info(f"–ö–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫): –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            # –†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥
        if voice_duration > 30:
            if mode == MODE_TRANSLATE:
                # –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
                mode = MODE_BOTH
                logger.info(f"–î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫): –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (MODE_SUMMARIZE) –∏–ª–∏ –æ–±–∞ —Ä–µ–∂–∏–º–∞ (MODE_BOTH), –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º
        is_owner_message = False
        if user_id:
            if OWNER_ID and str(user_id) == str(OWNER_ID) or user_id and user_id == context.bot.id:
                is_owner_message = True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
        is_forwarded = hasattr(message, 'forward_date') and message.forward_date is not None
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        processing_msg = await message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        file_to_download = None
        file_extension = '.ogg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if media_type == "voice":
            file_to_download = await message.voice.get_file()
            file_extension = '.ogg'
        elif media_type == "document":
            file_to_download = await message.document.get_file()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ MIME-—Ç–∏–ø–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if message.document.file_name:
                _, ext = os.path.splitext(message.document.file_name)
                if ext:
                    file_extension = ext
        elif media_type == "audio":
            file_to_download = await message.audio.get_file()
            file_extension = '.mp3'  # –û–±—ã—á–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —ç—Ç–æ mp3
            if message.audio.file_name:
                _, ext = os.path.splitext(message.audio.file_name)
                if ext:
                    file_extension = ext
        
        if not file_to_download:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_audio:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await file_to_download.download_to_drive(temp_audio.name)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {temp_audio.name}")
            
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ Whisper API
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ Whisper API
                detected_text, detected_lang = await transcribe_audio(temp_audio.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                if detected_text.startswith("QUOTA_EXCEEDED:"):
                    # –û—à–∏–±–∫–∞ –∫–≤–æ—Ç—ã API
                    await processing_msg.edit_text(
                        "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API OpenAI</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ API.", 
                        parse_mode="HTML"
                    )
                    return
                elif detected_text.startswith("RATE_LIMIT:"):
                    # –û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    await processing_msg.edit_text(
                        "‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", 
                        parse_mode="HTML"
                    )
                    return
                
                # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                logger.info(f"üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {detected_text}, —è–∑—ã–∫: {detected_lang}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞
                if detected_lang not in enabled_languages:
                    logger.info(f"–Ø–∑—ã–∫ {detected_lang} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞ {chat_id}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    temp_languages = enabled_languages.copy()
                    temp_languages.append(detected_lang)
                else:
                    temp_languages = enabled_languages
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                result = await process_message_content(detected_text, detected_lang, {
                    "enabled_languages": temp_languages, 
                    "mode": mode
                }, voice_duration)
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                result_message = ""
                
                # –í —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if mode == MODE_SUMMARIZE:
                    if "summary" in result and result["summary"]:
                        result_message = f"{result['summary']}\n\n"
                # –í —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                elif mode == MODE_TRANSLATE:
                    result_message = f"üéôÔ∏è **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ({LANG_EMOJIS.get(detected_lang, '')}):**\n{result['original']}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
                    if "translations" in result and result["translations"]:
                        result_message += "üîÑ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n"
                        for lang, translated_text in result["translations"].items():
                            if lang != detected_lang:
                                result_message += f"{LANG_EMOJIS.get(lang, '')}: {translated_text}\n\n"
                # –í –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥—ã, –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –Ω–æ –±–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                elif mode == MODE_BOTH:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
                    if "translations" in result and result["translations"]:
                        result_message += "üîÑ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n"
                        for lang, translated_text in result["translations"].items():
                            if lang != detected_lang:
                                result_message += f"{LANG_EMOJIS.get(lang, '')}: {translated_text}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if "summary" in result and result["summary"]:
                        result_message += f"{result['summary']}\n\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
                is_owner_message = False
                if user_id:
                    if OWNER_ID and str(user_id) == str(OWNER_ID) or user_id and user_id == context.bot.id:
                        is_owner_message = True
                        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
                is_forwarded = hasattr(message, 'forward_date') and message.forward_date is not None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è TTS
                voice_copy_path = None
                if tts_enabled:
                    with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as voice_copy:
                        shutil.copy2(temp_audio.name, voice_copy.name)
                        voice_copy_path = voice_copy.name
                
                # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_deleted = False
                
                # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                message_sent = False
                message_successfully_updated = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –ù–∞—á–∏–Ω–∞–µ–º –±–ª–æ–∫ try –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ ignore - –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    if "ignore" in result and result["ignore"]:
                        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
                        if processing_msg:
                            try:
                                await safe_delete_message(processing_msg)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                        return
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if "message" in result:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –∫–æ—Ä–æ—Ç–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
                        if processing_msg:
                            try:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ context.bot.edit_message_text –≤–º–µ—Å—Ç–æ processing_msg.edit_text –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                                await context.bot.edit_message_text(
                                    text=result["message"],
                                    chat_id=processing_msg.chat_id,
                                    message_id=processing_msg.message_id,
                                    parse_mode='Markdown'
                                )
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {result['message']}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                                try:
                                    await safe_delete_message(processing_msg)
                                except:
                                    pass
                                await message.reply_text(result["message"], parse_mode='Markdown')
                        else:
                            await message.reply_text(result["message"], parse_mode='Markdown')
                        
                        # –†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç: –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        # –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        return
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    elif tts_enabled and "message" not in result:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –±–µ–∑ –∫–∞–ø—à–µ–Ω–∞
                        if len(result_message) > 1024:
                            sent_msg = await context.bot.send_voice(
                                chat_id=chat_id,
                                voice=open(voice_copy_path, 'rb')
                            )
                            
                            # –ò –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º
                            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ (WhatsApp –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –¥—É–±–ª–µ–π)
                            if not message_successfully_updated:
                                current_parse_mode = 'HTML' if mode in [MODE_SUMMARIZE, MODE_BOTH] else 'Markdown'
                                await send_split_message(
                                    context=context,
                                    chat_id=chat_id,
                                    message_text=result_message.strip(),
                                    reply_to_message_id=sent_msg.message_id,
                                    parse_mode=current_parse_mode
                                )
                        else:
                            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–∞–ø—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –Ω–∏–º
                            sent_msg = await context.bot.send_voice(
                                chat_id=chat_id,
                                voice=open(voice_copy_path, 'rb'),
                                caption=result_message.strip(),
                                parse_mode='Markdown'
                            )
                            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ –∫–∞–ø—à–µ–Ω–µ
                            message_sent = True
                    # –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è - –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                        message_length = len(result_message.strip())
                        
                        # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (>1000 —Å–∏–º–≤–æ–ª–æ–≤) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
                        if message_length > 1000 or 'summary' in result and result['summary']:
                            logger.info(f"–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_length} —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ —Ä–µ–∂–∏–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                            if processing_msg and not message_deleted and not disable_message_deletion:
                                try:
                                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                    await safe_delete_message(processing_msg)
                                    message_deleted = True
                                except Exception as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
                            current_parse_mode = 'HTML' if mode in [MODE_SUMMARIZE, MODE_BOTH] else 'Markdown'
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {current_parse_mode} –¥–ª—è —Ä–µ–∂–∏–º–∞: {mode}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await send_split_message(
                                context=context,
                                chat_id=chat_id,
                                message_text=result_message.strip(),
                                reply_to_message_id=message.message_id,
                                parse_mode=current_parse_mode
                            )
                            message_sent = True
                        else:
                            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            if processing_msg:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                                success = await safe_edit_message(context, processing_msg, result_message.strip())
                                if success:
                                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                                    message_successfully_updated = True  # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ
                                    
                                    # !!! –í–ê–ñ–ù–û !!! –†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                    if voice_copy_path and os.path.exists(voice_copy_path):
                                        os.unlink(voice_copy_path)
                                    
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TTS –æ—Ç–¥–µ–ª—å–Ω–æ
                                    if tts_enabled and mode in [MODE_TRANSLATE, MODE_BOTH]:
                                        # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏ - –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π
                                        target_langs = [lang for lang in enabled_languages if lang != detected_lang]
                                        if target_langs:
                                            target_lang = target_langs[0]
                                            target_text = result["translations"].get(target_lang)
                                            if target_text:
                                                await process_tts_async(target_text, target_lang, chat_id, context, message.message_id)
                                    
                                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                                    return
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                                    
                                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                                    if not message_successfully_updated and hasattr(processing_msg, 'edit_text'):
                                        try:
                                            await processing_msg.edit_text(
                                                text=result_message.strip(),
                                                parse_mode='Markdown'
                                            )
                                            message_successfully_updated = True
                                            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                                        except Exception as edit_error:
                                            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {edit_error}")
                                    
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ç–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
                                    # –ù–û! –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                                    if not message_successfully_updated:  
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —á–∞—Ç–æ–º
                                        is_private_chat = False
                                        if (hasattr(message, 'chat') and message.chat and message.chat.type == ChatType.PRIVATE) or \
                                           (hasattr(processing_msg, 'chat') and processing_msg.chat and processing_msg.chat.type == ChatType.PRIVATE):
                                            is_private_chat = True
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
                                        is_business = False
                                        if hasattr(message, 'business_chat_id') or hasattr(processing_msg, 'business_chat_id'):
                                            is_business = True
                                        
                                        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏–ª–∏ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª—è—Ç—å - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        if is_private_chat or is_business:
                                            logger.info("–ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º/–±–∏–∑–Ω–µ—Å —á–∞—Ç–µ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
                                            try:
                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
                                                await send_split_message(
                                                    context=context,
                                                    chat_id=chat_id,
                                                    message_text=result_message.strip(),
                                                    reply_to_message_id=message.message_id,
                                                    parse_mode='Markdown'
                                                )
                                                message_successfully_updated = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                                            except Exception as inner_error:
                                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {inner_error}")
                                        else:
                                            # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                                            logger.info("–î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
                                            try:
                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                                                await send_split_message(
                                                    context=context,
                                                    chat_id=chat_id,
                                                    message_text=result_message.strip(),
                                                    reply_to_message_id=message.message_id,
                                                    parse_mode='Markdown'
                                                )
                                                message_successfully_updated = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                                            except Exception as inner_error:
                                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {inner_error}")
                            else:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–ª–∞–≥–∞. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –º—ã –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ
                                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                                if message_successfully_updated:
                                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º")
                                    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                                elif message_sent:
                                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º")
                                    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                                else:
                                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                                    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                    await send_split_message(
                                        context=context,
                                        chat_id=chat_id,
                                        message_text=result_message.strip(),
                                        reply_to_message_id=message.message_id,
                                        parse_mode='Markdown'
                                    )
                                    message_sent = True
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if voice_copy_path and os.path.exists(voice_copy_path):
                        os.unlink(voice_copy_path)
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if processing_msg:
                        try:
                            await context.bot.edit_message_text(
                                text=result_message.strip(),
                                chat_id=processing_msg.chat_id,
                                message_id=processing_msg.message_id,
                                parse_mode='Markdown'
                            )
                        except Exception as edit_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}", exc_info=True)
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await message.reply_text(result_message.strip(), parse_mode='Markdown')
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ
                        await message.reply_text(result_message.strip(), parse_mode='Markdown')
                else:
                    # –î–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if is_chat_owner and processing_msg is not None:
                        # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        try:
                            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await context.bot.edit_message_text(
                                text=result_message.strip(),
                                chat_id=processing_msg.chat_id,
                                message_id=processing_msg.message_id,
                                parse_mode='Markdown'
                            )
                        except Exception as e:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ), —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                            await safe_delete_message(processing_msg)
                            
                            # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await send_split_message(
                                context=context,
                                chat_id=chat_id,
                                message_text=result_message.strip(),
                                reply_to_message_id=message.message_id,
                                parse_mode='Markdown'
                            )
                    elif processing_msg is None:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ (–¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                        try:
                            await message.reply_text(result_message.strip(), parse_mode='Markdown')
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            await send_split_message(
                                context=context,
                                chat_id=chat_id,
                                message_text=result_message.strip(),
                                reply_to_message_id=message.message_id,
                                parse_mode='Markdown'
                            )
                    else:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        if not message_sent:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            if processing_msg:
                                await safe_delete_message(processing_msg)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –±–æ–ª—å—à–æ–π –¥–ª–∏–Ω—ã
                            try:
                                await message.reply_text(result_message.strip(), parse_mode='Markdown')
                                message_sent = True
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É: {e}")
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                                await send_split_message(
                                    context=context,
                                    chat_id=chat_id,
                                    message_text=result_message.strip(),
                                    reply_to_message_id=message.message_id,
                                    parse_mode='Markdown'
                                )
                                message_sent = True
                        else:
                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                            if processing_msg:
                                await safe_delete_message(processing_msg)
                    
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                if tts_enabled and mode in [MODE_TRANSLATE, MODE_BOTH]:
                    # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏ - –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π
                    target_langs = [lang for lang in enabled_languages if lang != detected_lang]
                    if target_langs:
                        target_lang = target_langs[0]
                        target_text = result["translations"].get(target_lang)
                        
                        if target_text:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö
                            chat_type = message.chat.type if hasattr(message, 'chat') else "unknown"
                            is_private = chat_type == ChatType.PRIVATE
                            
                            # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
                            # —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
                            should_send_notification = not is_private or (is_private and (message_successfully_updated or message_sent))
                            
                            if should_send_notification:
                                await message.reply_text(f"üé§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–∑–≤—É—á–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ {LANG_EMOJIS.get(target_lang, '')}...")
                            else:
                                logger.info(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞—É–¥–∏–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ")
                            
                            try:
                                audio_content = await generate_audio(target_text, target_lang)
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_tts:
                                    temp_tts.write(audio_content)
                                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {temp_tts.name}")
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                                    await message.reply_voice(temp_tts.name)
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    os.unlink(temp_tts.name)
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}", exc_info=True)
                                await message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ.")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞—É–¥–∏–æ
                os.unlink(temp_audio.name)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            error_message = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            if is_business and hasattr(update, 'business_message') and update.business_message:
                await update.business_message.reply_text(error_message)
            elif hasattr(update, 'message') and update.message:
                await update.message.reply_text(error_message)
        except Exception as inner_e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(inner_e)}", exc_info=True)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    if not telegram_token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!")
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ '#')
    if '#' in telegram_token:
        telegram_token = telegram_token.split('#')[0].strip()
        logger.info("–¢–æ–∫–µ–Ω –±—ã–ª –æ—á–∏—â–µ–Ω –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω OpenAI API!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(telegram_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("languages", settings_langs_command))
    application.add_handler(CommandHandler("settings_langs_ru_en", settings_langs_ru_en_command))
    application.add_handler(CommandHandler("settings_langs_ru_id", settings_langs_ru_id_command))
    application.add_handler(CommandHandler("settings_langs_en_id", settings_langs_en_id_command))
    application.add_handler(CommandHandler("mode", settings_mode_command))
    application.add_handler(CommandHandler("settings_mode", settings_mode_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
    application.add_handler(CommandHandler("settings_mode_translate", settings_mode_translate_command))
    application.add_handler(CommandHandler("settings_mode_summarize", settings_mode_summarize_command))
    application.add_handler(CommandHandler("settings_mode_both", settings_mode_both_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
    application.add_handler(CommandHandler("settings_mode_perevod", settings_mode_perevod_command))
    application.add_handler(CommandHandler("settings_mode_sammarajz", settings_mode_sammarajz_command))
    application.add_handler(CommandHandler("settings_mode_bof", settings_mode_bof_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ
    application.add_handler(CommandHandler("tts", settings_tts_command))
    application.add_handler(CommandHandler("tts_on", tts_on_command))
    application.add_handler(CommandHandler("tts_off", tts_off_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–∞–∫ –≤ translator_bot.py
    application.add_handler(MessageHandler(
        filters.ALL,
        handle_business_voice,
        block=False
    ))
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
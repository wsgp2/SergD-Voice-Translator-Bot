import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatType
from openai import OpenAI
from dotenv import load_dotenv
import tempfile
import json
import re
from google.cloud import texttospeech

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)
logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
google_client = texttospeech.TextToSpeechClient()

LANG_EMOJIS = {
    'ru': 'üá∑üá∫',
    'id': 'üáÆüá©',
    'en': 'üá∫üá∏'
}

VOICES = {
    'ru': 'shimmer',  # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å üë©
    'id': 'nova',     # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å üë©
    'en': 'echo'      # –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å üë®
}

def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"""
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'\s+([.,!?])', r'\1', text)
    text = re.sub(r'[¬´¬ª"""]', '"', text)
    return text.strip()

async def transcribe_audio(audio_file_path: str) -> tuple[str, str]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è Whisper API"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞: {audio_file_path}")
        with open(audio_file_path, "rb") as audio_file:
            response = openai_client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="verbose_json"
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Whisper API: {response}")
            return response.text, 'ru' if 'russian' in response.language.lower() else 'id'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        raise

async def translate_with_gpt(text: str, source_lang: str) -> dict:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è ChatGPT"""
    translations = {source_lang: clean_text(text)}
    
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {text} —Å —è–∑—ã–∫–∞ {source_lang}")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        if source_lang == 'ru':
            system_prompt = """You are a professional translator with expertise in Russian, English, and Indonesian languages. 
            Your task is to translate the given Russian text while:
            1. üéØ Preserving the original meaning and context
            2. üí´ Using natural, fluent language in the target languages
            3. üé≠ Maintaining the tone and style of the original text
            4. üîç Being attentive to cultural nuances
            5. üìö Using appropriate idioms when applicable
            
            Return translations in this exact JSON format:
            {"english": "translation", "indonesian": "translation"}"""
        else:
            system_prompt = """You are a professional translator with expertise in Indonesian, English, and Russian languages.
            Your task is to translate the given Indonesian text while:
            1. üéØ Preserving the original meaning and context
            2. üí´ Using natural, fluent language in the target languages
            3. üé≠ Maintaining the tone and style of the original text
            4. üîç Being attentive to cultural nuances
            5. üìö Using appropriate idioms when applicable
            
            Return translations in this exact JSON format:
            {"english": "translation", "russian": "translation"}"""
            
        user_prompt = f"Translate this text with attention to context and cultural nuances: {text}"

        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            response_format={ "type": "json_object" }
        )
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        result = json.loads(response.choices[0].message.content)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {result}")
        
        if source_lang == 'ru':
            translations['en'] = clean_text(result['english'])
            translations['id'] = clean_text(result['indonesian'])
        else:
            translations['en'] = clean_text(result['english'])
            translations['ru'] = clean_text(result['russian'])
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}", exc_info=True)
        translations['en'] = "Error during translation"
        translations['id' if source_lang == 'ru' else 'ru'] = "Error during translation"
    
    return translations

async def generate_audio(text: str, lang: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI TTS –∏–ª–∏ Google TTS –¥–ª—è –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    try:
        logger.info(f"üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text} –Ω–∞ —è–∑—ã–∫–µ {lang}")
        
        # –î–ª—è –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Google Cloud TTS
        if lang == 'id':
            input_text = texttospeech.SynthesisInput(text=text)
            
            voice = texttospeech.VoiceSelectionParams(
                language_code='id-ID',
                name='id-ID-Standard-A'
            )
            
            audio_config = texttospeech.AudioConfig(
                audio_encoding=texttospeech.AudioEncoding.MP3
            )
            
            response = google_client.synthesize_speech(
                input=input_text,
                voice=voice,
                audio_config=audio_config
            )
            
            return response.audio_content
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI TTS –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if lang not in VOICES:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –¥–ª—è TTS: {lang}")
            raise ValueError(f"Unsupported language for TTS: {lang}")
            
        response = openai_client.audio.speech.create(
            model="tts-1",
            voice=VOICES[lang],
            input=text
        )
        return response.content
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}", exc_info=True)
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n'
        '–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π) –∏ –ø–µ—Ä–µ–≤–æ–∂—É:\n'
        '–†—É—Å—Å–∫–∏–π ‚Üí –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n'
        '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π\n'
        ' + –¥–æ–±–∞–≤–ª—è—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n'
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        '2. –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫\n'
        '3. –ü–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏\n'
        '4. –ü–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã\n'
        '5. –û—Ç–ø—Ä–∞–≤–∏—Ç –∞—É–¥–∏–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º\n\n'
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n'
        '–†—É—Å—Å–∫–∏–π\n'
        '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π\n'
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)'
    )

async def handle_business_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∏–∑–Ω–µ—Å-—Ä–µ–∂–∏–º–µ"""
    chat_type = update.message.chat.type if update.message and update.message.chat else "unknown"
    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
    await handle_voice(update, context)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n\nüîÑ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = await update.message.voice.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_audio:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await voice.download_to_drive(temp_audio.name)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {temp_audio.name}")
            
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ Whisper API
                detected_text, detected_lang = await transcribe_audio(temp_audio.name)
                logger.info(f"üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {detected_text}, —è–∑—ã–∫: {detected_lang}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ ChatGPT
                translations = await translate_with_gpt(detected_text, detected_lang)
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã: {translations}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
                message = f"""üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {LANG_EMOJIS[detected_lang]}

üí≠ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
{LANG_EMOJIS[detected_lang]} {translations[detected_lang]}

üåü –ü–µ—Ä–µ–≤–æ–¥—ã:
{LANG_EMOJIS['en']} {translations['en']}

{LANG_EMOJIS['id' if detected_lang == 'ru' else 'ru']} {translations['id' if detected_lang == 'ru' else 'ru']}

üé§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–∑–≤—É—á–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥..."""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
                await update.message.reply_text(message.strip())
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ
                target_lang = 'id' if detected_lang == 'ru' else 'ru'
                target_text = translations[target_lang]
                logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {target_lang}: {target_text}")
                audio_content = await generate_audio(target_text, target_lang)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_tts:
                    temp_tts.write(audio_content)
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {temp_tts.name}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    await update.message.reply_voice(temp_tts.name)
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(temp_audio.name)
                if 'temp_tts' in locals():
                    os.unlink(temp_tts.name)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await update.message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    if not telegram_token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!")
        return
    
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω OpenAI API!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(telegram_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.VOICE,
        handle_voice,
        block=False
    ))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
